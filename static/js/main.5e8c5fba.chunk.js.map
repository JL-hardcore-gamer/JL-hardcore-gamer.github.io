{"version":3,"sources":["serviceWorker.js","config.js","ducks/user.js","NavBar.js","SignUp.js","SignIn.js","ducks/game.js","Lobby.js","Room.js","Card.js","utils.js","Game.js","Assets.js","App.js","ducks/reducers.js","index.js","bg-img.jpg"],"names":["Boolean","window","location","hostname","match","API","process","setUserAction","newUser","type","payload","setUserServerCheckedAction","serverChecked","defaultState","data","NavBar","props","user","useSelector","state","dispatch","useDispatch","className","to","nickname","onClick","localStorage","clear","LoginContainer","styled","div","LoginForm","ActionContainer","Signup","history","useHistory","useState","email","setEmail","setNickname","console","log","value","onChange","e","target","id","axios","post","then","res","setItem","token","push","SignIn","setRoomsAction","rooms","setCurrentRoom","room","setPlayers","players","addPlayedCardAction","newPlayedCard","client","currentRoom","playerHand","rounds","currentTrickPlayedCard","playersBet","scores","LobbyContainer","LobbyHeader","h5","RoomList","RoomContainer","Lobby","game","useEffect","getAvailableRooms","catch","error","create","onAdd","player","i","map","idx","date","moment","createdAt","format","key","roomId","joinById","RoomHeader","PlayerList","PlayerInfo","PlayerIcon","Room","onMessage","message","send","name","GeneratedCard","bgColor","cursor","CardTitle","CardContent","CardNumber","span","Card","cursorState","color","icon1","icon2","cardContent","style","fontSize","suits","specialCards","cardList","forEach","generateCardList","Board","PlayerBoard","PlayerHeader","PlayerData","PlayerCardContainer","PlayerHandContainer","CardContainer","GameStateInfoContainer","GameStateInfo","GameStatusMessageContainer","GameStatusMessage","GameBet","BloodyMaryChoice","WinnerScreen","Game","userName","showBloodyMary","setShowBloodyMary","handleClose","currentRound","setCurrentRound","currentPlayerId","setCurrentPlayerId","bloodyMary","setBloodyMary","isRoundStarted","setIsRoundStarted","playersPlayedCard","maxBet","setMaxBet","playerBet","setPlayerBet","winner","gameMessage","setGameMessage","length","setPlayerHandAction","hand","remainingRounds","round","currentPlayer","find","newRound","playersHand","addRoundAction","currentTrick","changes","change","field","cardsPlayed","cardPlayed","playedId","parseInt","cardPlayedId","scoreboard","score","topMessage","setPlayersBetAction","bet","playerId","tricksWon","winnerId","playerWonTrickAction","isCorrectBet","test","isCurrentPlayer","min","max","disabled","playerCard","card","cardId","playerScore","cardData","c","Modal","show","onHide","Header","closeButton","Title","Body","textAlign","bloodyMaryChoice","role","GeneratedCardContainer","Assets","Root","bgImg","Content","TitleContainer","PublicRoute","Component","component","render","ProtectedRoute","App","getItem","response","path","SignUp","rootReducer","combineReducers","action","filter","newPlayersBet","winnerIdx","findIndex","p","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","Colyseus","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5e8c5fba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const API = process.env.REACT_APP_API || 'http://localhost:2567';\nconst WS = process.env.REACT_APP_WS || 'ws://localhost:2567';\n\nexport { API, WS };\n","const SET_USER = 'SET_USER';\nconst SET_USER_SERVER_CHECKED = 'SET_USER_SERVER_CHECKED';\n\nexport const setUserAction = (newUser) => {\n  return { type: SET_USER, payload: newUser };\n};\n\nexport const setUserServerCheckedAction = (serverChecked) => {\n  return { type: SET_USER_SERVER_CHECKED, payload: serverChecked };\n};\n\nconst defaultState = {\n  data: null,\n  serverChecked: null,\n};\n\nexport default function reducer(state = defaultState, action = {}) {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case SET_USER_SERVER_CHECKED:\n      return {\n        ...state,\n        serverChecked: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setUserAction, setUserServerCheckedAction } from './ducks/user';\n\nconst NavBar = (props) => {\n  const user = useSelector((state) => state.user.data);\n  const dispatch = useDispatch();\n\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        Hardcore Gamer\n      </Link>\n      <ul className=\"nav justify-content-end\">\n        {user && user.nickname ? (\n          <>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/game\">\n                Game (dev)\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/assets\">\n                Assets (dev)\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link\n                className=\"nav-link\"\n                to=\"/signin\"\n                onClick={() => {\n                  dispatch(setUserAction(null));\n                  dispatch(setUserServerCheckedAction(false));\n                  localStorage.clear();\n                }}\n              >\n                Déconnexion\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <div className=\"navbar-brand\">{user.nickname}</div>\n            </li>\n          </>\n        ) : (\n          <>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/signin\">\n                Connexion\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/signup\">\n                Créer un compte\n              </Link>\n            </li>\n          </>\n        )}\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { API } from './config';\nimport { setUserAction, setUserServerCheckedAction } from './ducks/user';\n\nconst LoginContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 50px;\n`;\n\nconst LoginForm = styled.div`\n  width: 30rem;\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Signup = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [nickname, setNickname] = useState('');\n\n  const onSubmit = () => {\n    axios\n      .post(`${API}/api/signup`, {\n        email,\n        nickname,\n      })\n      .then((res) => {\n        const data = res.data;\n        localStorage.setItem('nickname', data.nickname);\n        localStorage.setItem('token', data.token);\n        dispatch(\n          setUserAction({\n            nickname: data.nickname,\n            token: data.token,\n          })\n        );\n        dispatch(setUserServerCheckedAction(true));\n        history.push('/');\n      });\n  };\n\n  console.log('process.env', process.env);\n\n  return (\n    <LoginContainer>\n      <LoginForm className=\"card\">\n        <div className=\"card-header\">Création d'un compte</div>\n        <div className=\"card-body\">\n          <div className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">Email</span>\n            </div>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\n              C'est juste pour générer un compte, on ne vous enverra pas\n              d'email.\n            </small>\n          </div>\n          <div className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">Pseudo</span>\n            </div>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={nickname}\n              onChange={(e) => setNickname(e.target.value)}\n            />\n          </div>\n          <ActionContainer>\n            <button className=\"btn btn-primary\" onClick={() => onSubmit()}>\n              Créer un compte\n            </button>\n          </ActionContainer>\n        </div>\n      </LoginForm>\n    </LoginContainer>\n  );\n};\n\nexport default Signup;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { API } from './config';\nimport { setUserAction, setUserServerCheckedAction } from './ducks/user';\n\nconst LoginContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 50px;\n`;\n\nconst LoginForm = styled.div`\n  width: 30rem;\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst SignIn = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n\n  const onSubmit = () => {\n    axios\n      .post(`${API}/api/signin`, {\n        email,\n      })\n      .then((res) => {\n        const data = res.data;\n        localStorage.setItem('nickname', data.nickname);\n        localStorage.setItem('token', data.token);\n\n        dispatch(\n          setUserAction({\n            nickname: data.nickname,\n            token: data.token,\n          })\n        );\n        dispatch(setUserServerCheckedAction(true));\n        history.push('/');\n      });\n  };\n\n  return (\n    <LoginContainer>\n      <LoginForm className=\"card\">\n        <div className=\"card-header\">Connexion à votre compte</div>\n        <div className=\"card-body\">\n          <div className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">Email</span>\n            </div>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n          </div>\n          <ActionContainer>\n            <button className=\"btn btn-primary\" onClick={() => onSubmit()}>\n              Se connecter\n            </button>\n          </ActionContainer>\n        </div>\n      </LoginForm>\n    </LoginContainer>\n  );\n};\n\nexport default SignIn;\n","const SET_CLIENT = 'SET_CLIENT';\nconst SET_ROOMS = 'SET_ROOMS';\nconst SET_GAME_STATE = 'SET_GAME_STATE';\nconst SET_CURRENT_ROOM = 'SET_CURRENT_ROOM';\nconst SET_PLAYERS = 'SET_PLAYERS';\nconst ADD_ROUND = 'ADD_ROUND';\nconst ADD_PLAYED_CARD = 'ADD_PLAYED_CARD';\nconst CLEAR_PLAYED_CARD = 'CLEAR_PLAYED_CARD';\nconst SET_PLAYER_HAND = 'SET_PLAYER_HAND';\nconst REMOVE_CARD_FROM_PLAYER_HAND = 'REMOVE_CARD_FROM_PLAYER_HAND';\nconst SET_PLAYERS_BET = 'SET_PLAYERS_BET';\nconst PLAYER_WON_TRICK = 'PLAYER_WON_TRICK';\nconst SET_SCORES = 'SET_SCORES';\n\nexport const setClientAction = (client) => {\n  return { type: SET_CLIENT, payload: client };\n};\n\nexport const setRoomsAction = (rooms) => {\n  return { type: SET_ROOMS, payload: rooms };\n};\n\nexport const setGameStateAction = (newState) => {\n  return { type: SET_GAME_STATE, payload: newState };\n};\n\nexport const setCurrentRoom = (room) => {\n  return { type: SET_CURRENT_ROOM, payload: room };\n};\n\nexport const setPlayers = (players) => {\n  return { type: SET_PLAYERS, payload: players };\n};\n\nexport const addRoundAction = (newRound) => {\n  return { type: ADD_ROUND, payload: newRound };\n};\n\nexport const addPlayedCardAction = (newPlayedCard) => {\n  return { type: ADD_PLAYED_CARD, payload: newPlayedCard };\n};\n\nexport const clearPlayedCardAction = () => {\n  return { type: CLEAR_PLAYED_CARD };\n};\n\nexport const setPlayerHandAction = (playerHand) => {\n  return { type: SET_PLAYER_HAND, payload: playerHand };\n};\n\nexport const removeCardFromPlayerHandAction = (cardIdx) => {\n  return { type: REMOVE_CARD_FROM_PLAYER_HAND, payload: cardIdx };\n};\n\nexport const setPlayersBetAction = (playersBet) => {\n  return { type: SET_PLAYERS_BET, payload: playersBet };\n};\n\nexport const playerWonTrickAction = (winnerId) => {\n  return { type: PLAYER_WON_TRICK, payload: winnerId };\n};\n\nexport const setScoresAction = (newScores) => {\n  return { type: SET_SCORES, payload: newScores };\n};\n\nconst defaultState = {\n  client: null,\n  rooms: [],\n  state: {},\n  currentRoom: null,\n  players: [],\n  playerHand: [],\n  rounds: [],\n  currentTrickPlayedCard: [],\n  playersBet: [],\n  scores: [],\n};\n\nexport default function reducer(state = defaultState, action = {}) {\n  switch (action.type) {\n    case SET_CLIENT:\n      return {\n        ...state,\n        client: action.payload,\n      };\n    case SET_ROOMS:\n      return {\n        ...state,\n        rooms: action.payload,\n      };\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        state: action.payload,\n      };\n    case SET_CURRENT_ROOM:\n      return {\n        ...state,\n        currentRoom: action.payload,\n      };\n    case SET_PLAYERS:\n      return {\n        ...state,\n        players: [...state.players, action.payload],\n      };\n    case ADD_ROUND:\n      return {\n        ...state,\n        rounds: [...state.rounds, action.payload],\n      };\n    case ADD_PLAYED_CARD:\n      return {\n        ...state,\n        currentTrickPlayedCard: [\n          ...state.currentTrickPlayedCard,\n          action.payload,\n        ],\n      };\n    case CLEAR_PLAYED_CARD:\n      return {\n        ...state,\n        currentTrickPlayedCard: [],\n      };\n    case SET_PLAYER_HAND:\n      return {\n        ...state,\n        playerHand: action.payload,\n      };\n    case REMOVE_CARD_FROM_PLAYER_HAND:\n      return {\n        ...state,\n        playerHand: state.playerHand.filter(\n          (card) => card.id !== action.payload\n        ),\n      };\n    case SET_PLAYERS_BET:\n      return {\n        ...state,\n        playersBet: action.payload,\n      };\n\n    case PLAYER_WON_TRICK:\n      const winnerId = action.payload;\n      let newPlayersBet = [...state.playersBet];\n      let winnerIdx = newPlayersBet.findIndex((p) => p.playerId === winnerId);\n      newPlayersBet[winnerIdx].tricksWon += 1;\n      return {\n        ...state,\n        playersBet: newPlayersBet,\n      };\n    case SET_SCORES:\n      return {\n        ...state,\n        scores: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport * as moment from 'moment';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setRoomsAction, setCurrentRoom, setPlayers } from './ducks/game';\n\nconst LobbyContainer = styled.div``;\nconst LobbyHeader = styled.h5`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst RoomList = styled.div`\n  display: flex;\n`;\n\nconst RoomContainer = styled.div`\n  margin: 0 10px;\n  width: 18rem;\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Lobby = (props) => {\n  const client = useSelector((state) => state.game.client);\n  const rooms = useSelector((state) => state.game.rooms);\n  const user = useSelector((state) => state.user.data);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    client\n      .getAvailableRooms('SkullKing')\n      .then((rooms) => {\n        dispatch(setRoomsAction(rooms));\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }, [client, dispatch]);\n\n  const createRoom = () => {\n    client\n      .create('SkullKing', {\n        nickname: user.nickname,\n        token: user.token,\n      })\n      .then((room) => {\n        room.state.players.onAdd = (player, i) => {\n          dispatch(setPlayers(player));\n        };\n\n        dispatch(setCurrentRoom(room));\n\n        history.push(`/room/${room.id}`);\n      })\n      .catch((e) => {\n        console.error('creation or join error', e);\n      });\n  };\n\n  const joinRoom = (roomId) => {\n    client\n      .joinById(roomId, {\n        nickname: user.nickname,\n        token: user.token,\n      })\n      .then((room) => {\n        room.state.players.onAdd = (player, i) => {\n          dispatch(setPlayers(player));\n        };\n\n        dispatch(setCurrentRoom(room));\n        history.push(`/room/${room.id}`);\n      })\n      .catch((e) => {\n        console.error('join error', e);\n      });\n  };\n\n  return (\n    <LobbyContainer className=\"card\">\n      <LobbyHeader className=\"card-header\">\n        Lobby\n        <ActionContainer>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => createRoom()}\n          >\n            Créer une table\n          </button>\n        </ActionContainer>\n      </LobbyHeader>\n      <div className=\"card-body\">\n        <RoomList>\n          {rooms.map((room, idx) => {\n            const date = moment(room.createdAt).format('DD/MM/YY HH:mm:ss');\n            return (\n              <RoomContainer key={idx} className=\"card\">\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Skull King - {room.roomId}</h5>\n                  <h6 className=\"card-subtitle mb-2 text-muted\">{date}</h6>\n                  <ActionContainer>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary\"\n                      onClick={() => joinRoom(room.roomId)}\n                    >\n                      Rejoindre\n                    </button>\n                  </ActionContainer>\n                </div>\n              </RoomContainer>\n            );\n          })}\n        </RoomList>\n      </div>\n    </LobbyContainer>\n  );\n};\n\nexport default Lobby;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setRoomsAction } from './ducks/game';\n\nconst RoomContainer = styled.div``;\nconst RoomHeader = styled.h5`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst PlayerList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst ActionContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst PlayerInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 300px;\n  margin: 0 10px 10px 0;\n`;\n\nconst PlayerIcon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 40px;\n  height: 40px;\n  border: solid 1px black;\n  border-radius: 20px;\n  margin: 10px;\n`;\n\nconst Room = (props) => {\n  const client = useSelector((state) => state.game.client);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const currentRoom = useSelector((state) => state.game.currentRoom);\n  const players = useSelector((state) => state.game.players);\n\n  useEffect(() => {\n    client\n      .getAvailableRooms('SkullKing')\n      .then((rooms) => {\n        dispatch(setRoomsAction(rooms));\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n\n    // FIXME\n    currentRoom.onMessage('GAME_STATE', (message) => {\n      console.log('message received from server');\n      console.log(message);\n    });\n\n    currentRoom.onMessage('GAME_STARTED', (message) => {\n      history.push('/game');\n    });\n  }, [client, currentRoom, dispatch, history]);\n\n  return (\n    <RoomContainer className=\"card\">\n      <RoomHeader className=\"card-header\">\n        <div>Room</div>\n        <ActionContainer>\n          <button\n            className=\"btn btn-primary\"\n            // Uncomment this after test\n            // disabled={players.length <= 2}\n            onClick={() => {\n              currentRoom.send('START_GAME', { message: 'hey' });\n              currentRoom.send('TEST', { message: 'TEST' });\n              history.push('/game');\n            }}\n          >\n            Lancer la partie\n          </button>\n        </ActionContainer>\n      </RoomHeader>\n\n      <div className=\"card-body\">\n        <PlayerList>\n          {players.map((player, idx) => {\n            return (\n              <PlayerInfo key={idx} className=\"card\">\n                <PlayerIcon>\n                  <i className=\"fas fa-dice-one fa-lg\" />\n                </PlayerIcon>\n                Name: {player.name}\n              </PlayerInfo>\n            );\n          })}\n        </PlayerList>\n      </div>\n    </RoomContainer>\n  );\n};\n\nexport default Room;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const CURSOR_NORMAL = 'NORMAL';\nexport const CURSOR_CLICKABLE = 'CLICKABLE';\nexport const CURSOR_DISABLE = 'DISABLE';\n\nconst GeneratedCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100px;\n  height: 130px;\n  border-radius: 5px;\n  border: 1px solid grey;\n  background-color: ${({ bgColor }) => bgColor};\n  cursor: ${({ cursor }) => cursor};\n`;\n\nconst CardTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  margin-top: 5px;\n`;\n\nconst CardContent = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CardNumber = styled.span`\n  font-size: 30px;\n`;\n\nconst Card = ({ type, color, value, icon1, icon2, cursor }) => {\n  let cardContent = null;\n  switch (type) {\n    case 'red':\n    case 'blue':\n    case 'yellow':\n    case 'black':\n      cardContent = (\n        <CardContent>\n          <CardNumber>{value}</CardNumber>\n        </CardContent>\n      );\n      break;\n    case 'purple':\n    case 'pink':\n    case 'grey':\n    case 'white':\n    case 'green-choice':\n      cardContent = (\n        <>\n          <CardTitle>{value}</CardTitle>\n          <CardContent>\n            <i className={`fas ${icon1} fa-3x`} />\n          </CardContent>\n        </>\n      );\n      break;\n    case 'green':\n      cardContent = (\n        <>\n          <CardTitle>{value}</CardTitle>\n          <CardContent>\n            <div>\n              <i className={`fas ${icon1} fa-2x`} />\n              <span style={{ fontSize: '40px' }}>/</span>\n              <i className={`fas ${icon2} fa-2x`} />\n            </div>\n          </CardContent>\n        </>\n      );\n      break;\n    default:\n      cardContent = (\n        <CardContent>\n          <CardNumber>{value}</CardNumber>\n        </CardContent>\n      );\n  }\n\n  let cursorState;\n\n  switch (cursor) {\n    case CURSOR_NORMAL:\n      cursorState = 'default';\n      break;\n    case CURSOR_CLICKABLE:\n      cursorState = 'pointer';\n      break;\n    case CURSOR_DISABLE:\n      cursorState = 'not-allowed';\n      break;\n    default:\n      cursorState = 'default';\n  }\n\n  return (\n    <GeneratedCard bgColor={color} cursor={cursorState}>\n      {cardContent}\n    </GeneratedCard>\n  );\n};\n\nexport default Card;\n","const suits = [\n  { type: 'red', color: '#f44336' },\n  { type: 'blue', color: '#2196f3' },\n  { type: 'yellow', color: '#ffeb3b' },\n  { type: 'black', color: '#607d8b' },\n];\n\nconst specialCards = [\n  {\n    id: 52,\n    type: 'purple',\n    color: '#9c27b0',\n    value: 'JL King',\n    icon1: 'fa-chess-king',\n    icon2: null,\n  },\n  {\n    id: 53,\n    type: 'pink',\n    color: '#e27b9e',\n    value: 'Mermaid',\n    icon1: 'fa-fish',\n    icon2: null,\n  },\n  {\n    id: 54,\n    type: 'pink',\n    color: '#e27b9e',\n    value: 'Mermaid',\n    icon1: 'fa-fish',\n    icon2: null,\n  },\n  {\n    id: 55,\n    type: 'grey',\n    color: '#9e9e9e',\n    value: 'Pirate',\n    icon1: 'fa-skull-crossbones',\n    icon2: null,\n  },\n  {\n    id: 56,\n    type: 'grey',\n    color: '#9e9e9e',\n    value: 'Pirate',\n    icon1: 'fa-skull-crossbones',\n    icon2: null,\n  },\n  {\n    id: 57,\n    type: 'grey',\n    color: '#9e9e9e',\n    value: 'Pirate',\n    icon1: 'fa-skull-crossbones',\n    icon2: null,\n  },\n  {\n    id: 58,\n    type: 'grey',\n    color: '#9e9e9e',\n    value: 'Pirate',\n    icon1: 'fa-skull-crossbones',\n    icon2: null,\n  },\n  {\n    id: 59,\n    type: 'grey',\n    color: '#9e9e9e',\n    value: 'Pirate',\n    icon1: 'fa-skull-crossbones',\n    icon2: null,\n  },\n  {\n    id: 60,\n    type: 'white',\n    color: 'white',\n    value: 'Escape',\n    icon1: 'fa-flag',\n    icon2: null,\n  },\n  {\n    id: 61,\n    type: 'white',\n    color: 'white',\n    value: 'Escape',\n    icon1: 'fa-flag',\n    icon2: null,\n  },\n  {\n    id: 62,\n    type: 'white',\n    color: 'white',\n    value: 'Escape',\n    icon1: 'fa-flag',\n    icon2: null,\n  },\n  {\n    id: 63,\n    type: 'white',\n    color: 'white',\n    value: 'Escape',\n    icon1: 'fa-flag',\n    icon2: null,\n  },\n  {\n    id: 64,\n    type: 'white',\n    color: 'white',\n    value: 'Escape',\n    icon1: 'fa-flag',\n    icon2: null,\n  },\n  {\n    id: 65,\n    type: 'green',\n    color: '#4caf50',\n    value: 'Bloody Mary',\n    icon1: 'fa-skull-crossbones',\n    icon2: 'fa-flag',\n  },\n  {\n    id: 66,\n    type: 'green-choice',\n    color: '#9e9e9e',\n    value: 'Bloody Mary',\n    icon1: 'fa-skull-crossbones',\n    icon2: null,\n  },\n  {\n    id: 67,\n    type: 'green-choice',\n    color: 'white',\n    value: 'Bloody Mary',\n    icon1: 'fa-flag',\n    icon2: null,\n  },\n];\n\nconst generateCardList = () => {\n  let cardList = [];\n  let id = 0;\n  suits.forEach(({ color, type }) => {\n    for (let i = 1; i <= 13; ++i) {\n      cardList.push({\n        id: id,\n        type: type,\n        color: color,\n        value: i,\n      });\n      ++id;\n    }\n  });\n\n  cardList.push(...specialCards);\n\n  return cardList;\n};\n\nconst cardList = generateCardList();\n\nexport { cardList };\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport Modal from 'react-bootstrap/Modal';\n\nimport Card, { CURSOR_NORMAL, CURSOR_CLICKABLE, CURSOR_DISABLE } from './Card';\nimport { cardList } from './utils';\nimport {\n  addRoundAction,\n  addPlayedCardAction,\n  clearPlayedCardAction,\n  setPlayerHandAction,\n  removeCardFromPlayerHandAction,\n  setPlayersBetAction,\n  playerWonTrickAction,\n  setScoresAction,\n} from './ducks/game';\n\nconst Board = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PlayerBoard = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n  height: 250px;\n  margin: 0 10px;\n\n  background-color: rgba(22, 22, 22, 0.2);\n  border-radius: 5px;\n`;\n\nconst PlayerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 5px;\n`;\n\nconst PlayerData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0 10px;\n`;\n\nconst PlayerCardContainer = styled.div`\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PlayerHandContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CardContainer = styled.div`\n  margin: 10px;\n`;\n\nconst GameStateInfoContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst GameStateInfo = styled.div`\n  font-size: 30px;\n`;\n\nconst GameStatusMessageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 20px;\n`;\n\nconst GameStatusMessage = styled.div`\n  display: flex;\n  font-size: 20px;\n`;\n\nconst GameBet = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 500px;\n`;\n\nconst BloodyMaryChoice = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst WinnerScreen = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding-top: 50px;\n  font-size: 25px;\n`;\n\nconst Game = () => {\n  const dispatch = useDispatch();\n  const userName = useSelector((state) => state.user.data.nickname);\n  const currentRoom = useSelector((state) => state.game.currentRoom);\n  const players = useSelector((state) => state.game.players);\n  const rounds = useSelector((state) => state.game.rounds);\n\n  const [showBloodyMary, setShowBloodyMary] = useState(false);\n\n  const handleClose = () => setShowBloodyMary(false);\n  const handleShow = () => setShowBloodyMary(true);\n\n  const playerHand = useSelector((state) => state.game.playerHand);\n  // Should be set after a message\n  const [currentRound, setCurrentRound] = useState(0);\n  const [currentPlayerId, setCurrentPlayerId] = useState(-1);\n  const [bloodyMary, setBloodyMary] = useState(null);\n  const [isRoundStarted, setIsRoundStarted] = useState(false);\n\n  const playersPlayedCard = useSelector(\n    (state) => state.game.currentTrickPlayedCard\n  );\n\n  const playersBet = useSelector((state) => state.game.playersBet);\n  const scores = useSelector((state) => state.game.scores);\n\n  const [maxBet, setMaxBet] = useState(-1);\n  const [playerBet, setPlayerBet] = useState(-1);\n  const [winner, setWinner] = useState(1);\n\n  const [gameMessage, setGameMessage] = useState(\n    'Pandora_Of_Oz joue une carte'\n  );\n\n  useEffect(() => {\n    console.log('=== RESET === ');\n    if (rounds.length > 0) {\n      dispatch(setPlayerHandAction(rounds[currentRound].hand));\n    }\n  }, [currentRound, rounds]);\n\n  useEffect(() => {\n    // Setup the room\n\n    if (currentRoom) {\n      currentRoom.state.game.remainingRounds.onAdd = (round, key) => {\n        const currentPlayer = players.find(\n          (player) => player.name === userName\n        );\n\n        const newRound = {\n          id: round.id,\n          hand: round.playersHand[currentPlayer.id].hand,\n        };\n\n        dispatch(addRoundAction(newRound));\n      };\n\n      currentRoom.state.currentTrick.onChange = (changes) => {\n        changes.forEach((change) => {\n          const { field, value } = change;\n          if (field === 'currentPlayer') {\n            setCurrentPlayerId(value);\n          }\n          if (field === 'bloodyMary') {\n            setBloodyMary(value);\n          }\n        });\n\n        currentRoom.state.currentTrick.cardsPlayed.onAdd = (\n          cardPlayed,\n          key\n        ) => {\n          dispatch(\n            addPlayedCardAction({\n              playedId: parseInt(key),\n              cardPlayedId: cardPlayed.id,\n            })\n          );\n        };\n\n        currentRoom.state.currentTrick.cardsPlayed.onChange = (\n          cardPlayed,\n          key\n        ) => {\n          dispatch(\n            addPlayedCardAction({\n              playedId: parseInt(key),\n              cardPlayedId: cardPlayed.id,\n            })\n          );\n        };\n\n        currentRoom.state.game.scoreboard.onAdd = (score, key) => {\n          console.log('onAdd score', score);\n          console.log('onAdd key', key);\n        };\n\n        currentRoom.state.game.scoreboard.onChange = (score, key) => {\n          console.log('onChange score', score);\n          console.log('onChange key', key);\n        };\n      };\n\n      currentRoom.onMessage('TOP_MESSAGE', (message) => {\n        setGameMessage(message);\n      });\n\n      currentRoom.onMessage('START_BETTING', (message) => {\n        setMaxBet(message.maxBet);\n        setGameMessage(message.topMessage);\n        setCurrentRound(message.maxBet - 1);\n        dispatch(clearPlayedCardAction());\n        setIsRoundStarted(false);\n        setBloodyMary(null);\n\n        if (message.scores) {\n          dispatch(setScoresAction(message.scores));\n        }\n      });\n\n      currentRoom.onMessage('START_ROUND', (message) => {\n        console.log('START_ROUND', message);\n        setIsRoundStarted(true);\n        dispatch(\n          setPlayersBetAction(\n            message.playersBet.map((bet) => ({\n              playerId: parseInt(bet.playerId),\n              bet: bet.bet,\n              tricksWon: 0,\n            }))\n          )\n        );\n      });\n\n      currentRoom.onMessage('CARD_VALIDATED', (message) => {\n        dispatch(removeCardFromPlayerHandAction(message.value));\n      });\n\n      currentRoom.onMessage('NEXT_TRICK', (message) => {\n        dispatch(clearPlayedCardAction());\n        setBloodyMary(null);\n      });\n\n      currentRoom.onMessage('TRICK_WINNER', (message) => {\n        console.log('TRICK_WINNER', message);\n        const winnerId = message.value;\n        dispatch(playerWonTrickAction(winnerId));\n      });\n\n      currentRoom.onMessage('GAME_OVER', (message) => {\n        console.log('GAME_OVER', message);\n        // FIXME Do Something\n      });\n    } else {\n      // Error the logic has not been implemented\n    }\n  }, [currentRoom, dispatch, playerHand, players, playersPlayedCard, userName]);\n\n  const regex = /^(?:[1-9]|0[1-9]|10|0)$/;\n  const isCorrectBet =\n    playerBet !== null &&\n    maxBet != null &&\n    playerBet >= 0 &&\n    playerBet <= maxBet &&\n    regex.test(playerBet);\n\n  const currentPlayer = players.find((player) => player.id === currentPlayerId);\n  const isCurrentPlayer =\n    currentPlayer && userName && currentPlayer.name === userName;\n\n  // const isCurrentPlayerWinner = currentPlayer.id === winner;\n  return winner !== null ? (\n    <div>\n      <GameStateInfoContainer>\n        <GameStateInfo>Round {currentRound + 1}</GameStateInfo>\n      </GameStateInfoContainer>\n      {gameMessage !== null ? (\n        <GameStatusMessageContainer>\n          <GameStatusMessage>{gameMessage}</GameStatusMessage>\n        </GameStatusMessageContainer>\n      ) : null}\n\n      {maxBet !== -1 ? (\n        <GameStatusMessageContainer>\n          <GameBet className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">Nombre de plis</span>\n            </div>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              min=\"0\"\n              max={maxBet}\n              onChange={(e) => {\n                setPlayerBet(parseInt(e.target.value));\n              }}\n            />\n            <div className=\"input-group-append\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                disabled={!isCorrectBet}\n                onClick={() => {\n                  if (playerBet >= 0) {\n                    currentRoom.send('BET', { value: playerBet });\n                    setMaxBet(-1);\n                  }\n                }}\n              >\n                Prêt à Yo-Ho-Ho\n              </button>\n            </div>\n          </GameBet>\n        </GameStatusMessageContainer>\n      ) : null}\n\n      <Board>\n        {players.map((player, idx) => {\n          const isCurrentPlayer = currentPlayerId === player.id;\n          const playerCard = playersPlayedCard.find(\n            (card) => card.playedId === player.id\n          );\n\n          let cardId = playerCard && playerCard.cardPlayedId;\n          if (cardId === 65 && bloodyMary === 'pirate') {\n            cardId = 66;\n          } else if (cardId === 65 && bloodyMary === 'escape') {\n            cardId = 67;\n          }\n\n          const playerBet = playersBet.find(\n            (bet) => bet.playerId === player.id\n          );\n\n          const playerScore = scores.find(\n            (score) => parseInt(score.playerId) === player.id\n          );\n\n          return (\n            <PlayerBoard key={idx}>\n              <PlayerHeader>\n                <div style={{ color: isCurrentPlayer ? 'red' : 'blue' }}>\n                  {player.name}\n                </div>\n                <PlayerData>\n                  <div>{playerScore ? `${playerScore.score}Pts` : '0Pt'}</div>\n                  <div>\n                    {' '}\n                    {playerBet\n                      ? `Bet: ${playerBet.tricksWon}/${playerBet.bet}`\n                      : 'Bet: -/-'}\n                  </div>\n                </PlayerData>\n              </PlayerHeader>\n              <PlayerCardContainer>\n                {playerCard ? (\n                  <Card {...cardList[cardId]} cursor={CURSOR_NORMAL} />\n                ) : null}\n              </PlayerCardContainer>\n            </PlayerBoard>\n          );\n        })}\n      </Board>\n      <PlayerHandContainer>\n        {playerHand.map((card, idx) => {\n          const cardData = cardList.find((c) => c.id === card.id);\n          return (\n            <CardContainer\n              key={idx}\n              onClick={() => {\n                if (isRoundStarted && isCurrentPlayer) {\n                  if (card.id === 65) {\n                    handleShow();\n                  } else {\n                    currentRoom.send('PLAY_CARD', { value: cardData.id });\n                  }\n                }\n              }}\n            >\n              <Card cursor={CURSOR_CLICKABLE} {...cardData} />\n            </CardContainer>\n          );\n        })}\n      </PlayerHandContainer>\n      <Modal show={showBloodyMary} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Bloody Mary</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div style={{ textAlign: 'center' }}>\n            Woohoo, tu es plutôt{' '}\n            <i className={`fas fa-skull-crossbones fa-lg`} /> ou{' '}\n            <i className={`fas fa-flag fa-lg`} /> ?\n          </div>\n\n          <BloodyMaryChoice>\n            <CardContainer\n              onClick={() => {\n                if (currentRoom) {\n                  currentRoom.send('PLAY_CARD', {\n                    value: 65,\n                    bloodyMaryChoice: 'pirate',\n                  });\n                }\n                handleClose();\n              }}\n            >\n              <Card cursor={CURSOR_CLICKABLE} {...cardList[66]} />\n            </CardContainer>\n            <CardContainer\n              onClick={() => {\n                if (currentRoom) {\n                  currentRoom.send('PLAY_CARD', {\n                    value: 65,\n                    bloodyMaryChoice: 'escape',\n                  });\n                }\n                handleClose();\n              }}\n            >\n              <Card cursor={CURSOR_CLICKABLE} {...cardList[67]} />\n            </CardContainer>\n          </BloodyMaryChoice>\n        </Modal.Body>\n      </Modal>\n    </div>\n  ) : (\n    <WinnerScreen>\n      <div>\n        Oh tu as perdu ? C'est pas grave... l'important c'est de participer !{' '}\n        <span role=\"img\">🤣</span>\n        <div>\n          Voici un cookie <span role=\"img\">🍪😘</span> (Tu peux cliquer{' '}\n          <button className=\"btn btn-primary\">ici</button> pour revenir au\n          lobby)\n        </div>\n      </div>\n      <div>\n        <div>On m'a dit que tu étais le nouveau King ? GG 🥳🥳🥳</div>\n        <div>Hop pop pop, on ne prend pas la grosse tête ! 🤨</div>\n        <div>\n          (Tu peux cliquer <button className=\"btn btn-primary\">ici</button> pour\n          revenir au lobby)\n        </div>\n      </div>\n    </WinnerScreen>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { cardList } from './utils';\nimport Card from './Card';\n\nconst GeneratedCardContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 10px;\n`;\n\nconst CardContainer = styled.div`\n  margin: 10px;\n`;\n\nconst Assets = () => {\n  return (\n    <div>\n      Assets\n      <GeneratedCardContainer>\n        {cardList.map((card, idx) => {\n          return (\n            <CardContainer key={idx}>\n              <Card {...card} />\n            </CardContainer>\n          );\n        })}\n      </GeneratedCardContainer>\n    </div>\n  );\n};\n\nexport default Assets;\n","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { Switch, Route, Redirect, useHistory } from 'react-router-dom';\n\nimport { API } from './config';\nimport NavBar from './NavBar';\nimport SignUp from './SignUp';\nimport SignIn from './SignIn';\nimport Lobby from './Lobby';\nimport Room from './Room';\nimport Game from './Game';\nimport Assets from './Assets';\nimport { setUserAction, setUserServerCheckedAction } from './ducks/user';\n\nimport bgImg from './bg-img.jpg';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-image: url(${bgImg});\n  height: 100vh;\n`;\n\nconst Content = styled.div`\n  padding: 15px;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst Title = styled.div`\n  font-family: 'Chomsky';\n  font-size: 4rem;\n`;\n\nconst PublicRoute = ({ component: Component, ...props }) => {\n  const serverChecked = useSelector((state) => state.user.serverChecked);\n  if (!serverChecked) {\n    return <Route {...props} render={(props) => <Component {...props} />} />;\n  } else {\n    return <Redirect to=\"/\" />;\n  }\n};\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n  const serverChecked = useSelector((state) => state.user.serverChecked);\n  if (serverChecked) {\n    // The user is correct\n    return <Route {...props} render={(props) => <Component {...props} />} />;\n  } else if (serverChecked === null) {\n    // We don't know if the user is correct\n    return <div>Loading...</div>;\n  } else {\n    // The user is incorrect\n    return <Redirect to=\"/signin\" />;\n  }\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    const nickname = localStorage.getItem('nickname');\n    const token = localStorage.getItem('token');\n\n    // Check if user correct\n    if (nickname && token) {\n      axios\n        .post(`${API}/api/check-user`, {\n          nickname,\n          token,\n        })\n        .then((res) => {\n          const { nickname, token } = res.data;\n          dispatch(\n            setUserAction({\n              nickname,\n              token,\n            })\n          );\n          dispatch(setUserServerCheckedAction(true));\n        })\n        .catch((e) => {\n          dispatch(setUserAction(null));\n          dispatch(setUserServerCheckedAction(false));\n          localStorage.clear();\n          history.push('/signin');\n          console.log('error', e.response);\n        });\n    } else {\n      history.push('/signin');\n    }\n  }, [dispatch, history]);\n\n  return (\n    <Root>\n      <NavBar />\n      <Content>\n        <TitleContainer>\n          <Title>Jean Luc King</Title>\n        </TitleContainer>\n        <Switch>\n          <PublicRoute path=\"/signup\" component={SignUp} />\n          <PublicRoute path=\"/signin\" component={SignIn} />\n          <ProtectedRoute path=\"/room/:id\" component={Room} />\n          <ProtectedRoute path=\"/assets\" component={Assets} />\n          <ProtectedRoute path=\"/game\" component={Game} />\n          <ProtectedRoute path=\"/game/:id\" component={Game} />\n          <ProtectedRoute path=\"/\" component={Lobby} />\n        </Switch>\n      </Content>\n    </Root>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport game from './game';\nimport user from './user';\n\nconst rootReducer = combineReducers({\n  game,\n  user,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as Colyseus from 'colyseus.js';\nimport { Provider } from 'react-redux';\nimport { createStore, compose } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nimport { WS } from './config';\nimport App from './App';\nimport reducers from './ducks/reducers';\nimport { setClientAction } from './ducks/game';\n\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst enhancer = composeEnhancers();\nconst store = createStore(reducers, enhancer);\n\nconst client = new Colyseus.Client(WS);\n\nstore.dispatch(setClientAction(client));\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg-img.0bf28038.jpg\";"],"sourceRoot":""}